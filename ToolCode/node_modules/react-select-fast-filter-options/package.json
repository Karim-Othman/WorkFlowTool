{
  "_from": "react-select-fast-filter-options",
  "_id": "react-select-fast-filter-options@0.2.3",
  "_inBundle": false,
  "_integrity": "sha512-rTMMRhd73MI1z2eWpes8sGoR4nBYM1IGjsYPvay2DF/kylHUmXFFIGsZJZQcXdBZnAXExKyw2kYKCGiYi4ls4Q==",
  "_location": "/react-select-fast-filter-options",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-select-fast-filter-options",
    "fetchSpec": "latest",
    "name": "react-select-fast-filter-options",
    "raw": "react-select-fast-filter-options",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-select-fast-filter-options/-/react-select-fast-filter-options-0.2.3.tgz",
  "_shasum": "d9f667ab1fe7bcc2dd8bfd74277e56c771e9e518",
  "_spec": "react-select-fast-filter-options",
  "_where": "D:\\Tooling\\WorkFlowTool\\WorkFlowTool\\ToolCode",
  "author": {
    "name": "Brian Vaughn",
    "url": "brian.david.vaughn@gmail.com"
  },
  "bundleDependencies": false,
  "dependencies": {
    "js-search": "^1.3.1"
  },
  "deprecated": false,
  "description": "react-select filterOptions function optimized to quickly filter large options lists",
  "devDependencies": {
    "babel-cli": "6.8.0",
    "babel-core": "^6.5.1",
    "babel-eslint": "^6.0.4",
    "babel-jest": "^18.0.0",
    "babel-loader": "^6.2.3",
    "babel-plugin-__coverage__": "^0.111111.11",
    "babel-plugin-react-transform": "^2.0.0",
    "babel-plugin-transform-react-inline-elements": "^6.6.5",
    "babel-plugin-transform-runtime": "^6.15.0",
    "babel-plugin-typecheck": "^3.9.0",
    "babel-polyfill": "^6.5.0",
    "babel-preset-es2015": "6.22.0",
    "babel-preset-es2015-rollup": "3.0.0",
    "babel-preset-react": "^6.5.0",
    "babel-preset-stage-2": "^6.5.0",
    "cross-env": "^3.1.3",
    "css-loader": "^0.25.0",
    "extract-text-webpack-plugin": "^1.0.1",
    "file-loader": "^0.9.0",
    "gh-pages": "^0.11.0",
    "html-webpack-plugin": "^2.22.0",
    "js-search": "^1.3.0",
    "react": "^15.3.1",
    "react-addons-shallow-compare": "^15.3.1",
    "react-dom": "^15.3.2",
    "react-transform-catch-errors": "^1.0.2",
    "react-transform-hmr": "^1.0.4",
    "react-virtualized-select": "^1.3.0",
    "redbox-react": "^1.3.0",
    "rimraf": "^2.5.4",
    "standard": "^7.0.1",
    "style-loader": "^0.13.0",
    "webpack": "^1.9.6",
    "webpack-dashboard": "0.0.1",
    "webpack-dev-server": "^1.14.0"
  },
  "jsnext:main": "dist/es/index.js",
  "license": "MIT",
  "main": "dist/commonjs/index.js",
  "name": "react-select-fast-filter-options",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14.0 || ^15.0.0 || ^16.0.0-a",
    "react-select": "^1.0.0-beta14"
  },
  "readme": "# react-select-fast-filter-options\nFast `filterOptions` function for `react-select`;\noptimized to quickly filter huge options lists.\n\n## Installation\n\nThe easiest way to install is using NPM:\n\n```shell\nnpm install react-select-fast-filter-options --save\n```\n\nES6, CommonJS, and UMD builds are available with each distribution.\nUse unpkg to access the UMD build:\n\n```html\n<script src=\"https://unpkg.com/react-select-fast-filter-options/dist/umd/react-select-fast-filter-options.js\"></script>\n```\n\n## Examples\n\n#### Basic example\n\nHere's how to fast filter with [`react-select`](https://github.com/JedWatson/react-select) or [`react-virtualized-select`](https://github.com/bvaughn/react-virtualized-select):\n\n```js\n// Import the Select component from either react-select or react-virtualized-select\nimport Select from 'react-virtualized-select' // or from 'react-select'\n\n// The search index will need to be recreated if your options array changes.\n// This index is powered by js-search: https://github.com/bvaughn/js-search\nconst filterOptions = createFilterOptions({ options })\n\n// Render your Select, complete with the fast-filter index\nfunction render ({ options }) {\n  return (\n    <Select\n      filterOptions={filterOptions}\n      options={options}\n      {...otherSelectProps}\n    />\n  )\n}\n```\n\nHere's how to fast filter with [`redux`](https://github.com/reactjs/redux), [`react-redux`](https://github.com/reactjs/react-redux), and [`reselect`](https://github.com/reactjs/reselect)\n\n#### Redux example\n\n##### selectors/SearchSelectors.js\n```js\n// selectors file\nimport { createSelector } from 'reselect';\nimport createFilterOptions from 'react-select-fast-filter-options';\n\n// Create a search index optimized to quickly filter options.\n// The search index will need to be recreated if your options array changes.\n// This index is powered by js-search: https://github.com/bvaughn/js-search\n// Reselect will only re-run this if options has changed\nexport const getIndexedOptions = createSelector(\n  state => state.options,\n  options => createFilterOptions({ options })\n)\n```\n\n##### components/Search.js\n```js\n// Import the Select component from either react-select or react-virtualized-select\nimport Select from 'react-virtualized-select'; // or from 'react-select'\n\n// Render your Select, complete with the fast-filter index\nfunction render ({ options }) {\n  return (\n    <Select\n      filterOptions={filterOptions}\n      options={options}\n      {...otherSelectProps}\n    />\n  )\n}\n\nimport { connect } from 'react-redux';\nimport { getIndexedOptions } from 'selectors/SearchSelectors'\n\nconst mapStateToProps = (state) => ({\n  options: getIndexedOptions(state)\n})\n\nexport default connect(mapStateToProps)(\n  render\n)\n```\n\n## Configuration Options\n\nBy default, `createFilterOptions` returns a filter function configured to match all substrings, in a case-insensitive way, and return results in their original order. However it supports all of the underlying [`js-search`](https://github.com/bvaughn/js-search) configuration options.\n\nThe following table shows all supported parameters and their default values:\n\n| Property | Type | Default | Description |\n|:---|:---|:---|:---|\n| `indexes` | `Array<String>` |  | Optional array of attributes to build search index from; defaults to the `labelKey` attribute. |\n| `indexStrategy` | [`IndexStrategy`](https://github.com/bvaughn/js-search/blob/master/source/IndexStrategy/IndexStrategy.js) | [`AllSubstringsIndexStrategy`](https://github.com/bvaughn/js-search/blob/master/source/IndexStrategy/AllSubstringsIndexStrategy.js) | See [js-search docs](https://github.com/bvaughn/js-search) |\n| `labelKey` | string | \"label\" | Option key containing the display text |\n| `options` | array | [] | Array of options objects |\n| `sanitizer` | [`Sanitizer`](https://github.com/bvaughn/js-search/blob/master/source/Sanitizer/Sanitizer.js) | [`LowerCaseSanitizer`](https://github.com/bvaughn/js-search/blob/master/source/Sanitizer/LowerCaseSanitizer.js) | See [js-search docs](https://github.com/bvaughn/js-search) |\n| `searchIndex` | [`SearchIndex`](https://github.com/bvaughn/js-search/blob/master/source/SearchIndex/SearchIndex.js) | [`UnorderedSearchIndex`](https://github.com/bvaughn/js-search/blob/master/source/SearchIndex/UnorderedSearchIndex.js) | See [js-search docs](https://github.com/bvaughn/js-search) |\n| `tokenizer` | [`Tokenizer`](https://github.com/bvaughn/js-search/blob/master/source/Tokenizer/Tokenizer.js) | [`SimpleTokenizer`](https://github.com/bvaughn/js-search/blob/master/source/Tokenizer/SimpleTokenizer.js) | See [js-search docs](https://github.com/bvaughn/js-search) |\n| `valueKey` | string | \"value\" | Option key containing the value |\n\n## Advanced Configuration\n\nThe default filter configuration mimics `react-search` behavior.\nBut you can also customize search.\nFor example:\n\n```js\nimport {\n  CaseSensitiveSanitizer,\n  ExactWordIndexStrategy,\n  Search,\n  SimpleTokenizer,\n  StemmingTokenizer,\n  TfIdfSearchIndex\n} from 'js-search'\nimport { stemmer } from 'porter-stemmer'\nimport createFilterOptions from 'react-select-fast-filter-options'\n\n// Default index strategy is built for all substrings.\n// In other word \"c\", \"ca\", \"cat\", \"a\", \"at\", and \"t\" all match \"cat\".\n// Override to only allow exact-word matches like so:\nconst indexStrategy = new ExactWordIndexStrategy()\n\n// Default sanitizer is case-insensitive\n// Searches for \"foo\" will match \"Foo\".\n// Override to be case-sensitive like so:\nconst sanitizer = new CaseSensitiveSanitizer()\n\n// By default, search results are returned in the order they wre indexed.\n// This means that your filtered options will match their unfiltered order.\n// More advanced results orderings are possbile.\n// For example TF-IDF ranking is an option.\n// Learn more at https://github.com/bvaughn/js-search#tf-idf-ranking\nconst searchIndex = new TfIdfSearchIndex()\n\n// Default tokenizer just splits search text on spaces.\n// In other words \"the boy\" becomes 2 search tokens, \"the\" and \"boy\".\n// The StemmingTokenizer can be used for fuzzier matching.\n// For example, \"searching\" will match  \"search\", \"searching\", and \"searched\".\n// Learn more at https://github.com/bvaughn/js-search#stemming\nconst tokenizer = new StemmingTokenizer(stemmer, new SimpleTokenizer())\n\nconst filterOptions = createFilterOptions({\n  indexStrategy,\n  options,\n  sanitizer,\n  searchIndex,\n  tokenizer\n})\n```\n\nIn addition to the stemming tokenizer, other tokenizers are available as well, including `StopWordsTokenizer` which removes common words like \"a\", \"and\", and \"the\".\nFor more information on available configuration options, see [`js-search` documentation](https://github.com/bvaughn/js-search).\n",
  "readmeFilename": "README.md",
  "scripts": {
    "build": "npm run build:commonjs && npm run build:es && npm run build:demo && npm run build:umd",
    "build:commonjs": "npm run clean:commonjs && cross-env NODE_ENV=production cross-env BABEL_ENV=commonjs babel source --out-dir dist/commonjs --ignore *.example.js,*.test.js,source/demo/,source/tests.js",
    "build:demo": "npm run clean:demo && cross-env NODE_ENV=production webpack --config webpack.config.demo.js -p --bail",
    "build:es": "npm run clean:es && cross-env NODE_ENV=production cross-env BABEL_ENV=es babel source --out-dir dist/es --ignore *.example.js,*.test.js,source/demo/,source/tests.js",
    "build:umd": "npm run clean:umd && cross-env NODE_ENV=production webpack --config webpack.config.umd.js --bail",
    "clean": "npm run clean:commonjs && npm run clean:demo && npm run clean:es && npm run clean:umd",
    "clean:commonjs": "rimraf dist/commonjs",
    "clean:demo": "rimraf build",
    "clean:es": "rimraf dist/es",
    "clean:umd": "rimraf dist/umd",
    "deploy": "gh-pages -d build",
    "postbuild": "cp ./styles.css ./build/",
    "postpublish": "npm run deploy",
    "start": "cross-env NODE_ENV=development webpack-dev-server --hot --inline --config webpack.config.dev.js"
  },
  "standard": {
    "global": [
      "afterAll",
      "afterEach",
      "beforeAll",
      "beforeEach",
      "describe",
      "expect",
      "fdescribe",
      "fit",
      "getComputedStyle",
      "it",
      "jasmine"
    ],
    "ignore": [
      "dist",
      "playground",
      "source/vendor"
    ],
    "parser": "babel-eslint"
  },
  "version": "0.2.3"
}
