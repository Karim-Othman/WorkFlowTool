{
  "_from": "react-virtualized-select",
  "_id": "react-virtualized-select@3.1.3",
  "_inBundle": false,
  "_integrity": "sha512-u6j/EfynCB9s4Lz5GGZhNUCZHvFQdtLZws7W/Tcd/v03l19OjpQs3eYjK82iYS0FgD2+lDIBpqS8LpD/hjqDRQ==",
  "_location": "/react-virtualized-select",
  "_phantomChildren": {
    "classnames": "2.2.6",
    "prop-types": "15.6.1",
    "react-input-autosize": "2.2.1"
  },
  "_requested": {
    "escapedName": "react-virtualized-select",
    "fetchSpec": "latest",
    "name": "react-virtualized-select",
    "raw": "react-virtualized-select",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-virtualized-select/-/react-virtualized-select-3.1.3.tgz",
  "_shasum": "e5c1fed5e493e3e5a628e53100e83d27cfd8c0ac",
  "_spec": "react-virtualized-select",
  "_where": "D:\\Tooling\\WorkFlowTool\\WorkFlowTool\\ToolCode",
  "author": {
    "name": "Brian Vaughn"
  },
  "bugs": {
    "url": "https://github.com/bvaughn/react-virtualized-select/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "babel-runtime": "^6.11.6",
    "prop-types": "^15.5.8",
    "react-select": "^1.0.0-rc.2",
    "react-virtualized": "^9.0.0"
  },
  "deprecated": false,
  "description": "Drop-down menu for React with windowing to support large numbers of options.",
  "devDependencies": {
    "autoprefixer": "^6.2.3",
    "babel-cli": "6.5.1",
    "babel-core": "^6.5.1",
    "babel-eslint": "^5.0.0",
    "babel-loader": "^6.2.3",
    "babel-plugin-__coverage__": "^0.1111.1",
    "babel-plugin-react-transform": "^2.0.0",
    "babel-plugin-transform-decorators-legacy": "^1.3.4",
    "babel-plugin-transform-react-inline-elements": "^6.6.5",
    "babel-plugin-transform-runtime": "^6.15.0",
    "babel-plugin-typecheck": "^3.6.1",
    "babel-polyfill": "^6.5.0",
    "babel-preset-es2015": "^6.22.0",
    "babel-preset-es2015-rollup": "^3.0.0",
    "babel-preset-react": "^6.5.0",
    "babel-preset-stage-0": "^6.5.0",
    "bluebird": "^3.0.5",
    "codecov": "^1.0.1",
    "cross-env": "^1.0.7",
    "css-loader": "^0.23.0",
    "express": "^4.13.3",
    "extract-text-webpack-plugin": "^1.0.1",
    "file-loader": "^0.8.5",
    "fs-extra": "^0.26.2",
    "gh-pages": "^0.6.0",
    "html-webpack-plugin": "^1.7.0",
    "jasmine": "^2.3.2",
    "jasmine-core": "^2.3.4",
    "karma": "^0.13.22",
    "karma-coverage": "^0.5.5",
    "karma-jasmine": "^0.3.6",
    "karma-junit-reporter": "^0.3.8",
    "karma-phantomjs-launcher": "^0.2.1",
    "karma-sourcemap-loader": "^0.3.6",
    "karma-spec-reporter": "0.0.23",
    "karma-webpack": "^1.7.0",
    "phantomjs": "^1.9.19",
    "postcss": "^5.0.14",
    "postcss-cli": "^2.3.3",
    "postcss-loader": "^0.8.0",
    "react": "^15.3.0",
    "react-addons-test-utils": "^15.3.0",
    "react-dom": "^15.3.0",
    "react-select": "^1.0.0-rc.2",
    "react-transform-catch-errors": "^1.0.2",
    "react-transform-hmr": "^1.0.2",
    "react-virtualized": "^9.0.0",
    "redbox-react": "^1.0.1",
    "rimraf": "^2.4.3",
    "standard": "^5.4.1",
    "style-loader": "^0.13.0",
    "watch": "^0.16.0",
    "webpack": "^1.9.6",
    "webpack-dev-server": "^1.14.0",
    "whatwg-fetch": "^2.0.1"
  },
  "homepage": "https://github.com/bvaughn/react-virtualized-select",
  "jsnext:main": "dist/es/index.js",
  "license": "MIT",
  "main": "dist/commonjs/index.js",
  "name": "react-virtualized-select",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^15.3.0 || ^16.0.0-alpha",
    "react-dom": "^15.3.0 || ^16.0.0-alpha"
  },
  "readme": "# React Virtualized Select\n\n![NPM version](https://img.shields.io/npm/v/react-virtualized-select.svg?style=flat)\n![NPM license](https://img.shields.io/npm/l/react-virtualized-select.svg?style=flat)\n![NPM total downloads](https://img.shields.io/npm/dt/react-virtualized-select.svg?style=flat)\n![NPM monthly downloads](https://img.shields.io/npm/dm/react-virtualized-select.svg?style=flat)\n[![PayPal donate button](https://img.shields.io/badge/paypal-donate-lightgray.svg?style=flat)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=5CVMYQKVPZC72)\n[![Patreon donate button](https://img.shields.io/badge/patreon-donate%20once-lightgray.svg?style=flat)](https://www.patreon.com/user?u=2979769)\n\n### Demos available here: http://bvaughn.github.io/react-virtualized-select/\n\n![react-virtualized-select example](https://cloud.githubusercontent.com/assets/29597/14285960/46d733a6-fb02-11e5-884a-e349eb462704.gif)\n\n## Getting started\n\nInstall `react-virtualized-select` using npm.\n\n```shell\nnpm install react-virtualized-select --save\n```\n\nES6, CommonJS, and UMD builds are available with each distribution.\nFor example:\n\n```js\n// Make sure to import default styles.\n// This only needs to be done once; probably during bootstrapping process.\nimport 'react-select/dist/react-select.css'\nimport 'react-virtualized/styles.css'\nimport 'react-virtualized-select/styles.css'\n\n// Then import the virtualized Select HOC\nimport VirtualizedSelect from 'react-virtualized-select'\n```\n\nAlternately you can load a global-friendly UMD build:\n\n```html\n<link rel=\"stylesheet\" href=\"path-to-react-select/dist/react-select.css\">\n<link rel=\"stylesheet\" href=\"path-to-react-virtualized/styles.css\">\n<link rel=\"stylesheet\" href=\"path-to-react-virtualized-select/styles.css\">\n\n<script src=\"path-to-react-virtualized-select/dist/umd/react-virtualized-select.js\"></script>\n```\n\n## Simple Example\n\n_react-select-virtualized_ works just like _react-select_. You pass it an array of options, along with any other parameters supported by the [`Select` component](https://github.com/JedWatson/react-select/#usage). Here's a simple example:\n\n```js\nimport React, { Component } from 'react'\nimport VirtualizedSelect from 'react-virtualized-select'\n\nimport 'react-select/dist/react-select.css'\nimport 'react-virtualized/styles.css'\nimport 'react-virtualized-select/styles.css'\n\nclass MySelect extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {}\n  }\n\n  render () {\n    const options = [\n      { label: \"One\", value: 1 },\n      { label: \"Two\", value: 2 },\n      { label: \"Three\", value: 3, disabled: true }\n      // And so on...\n    ]\n\n    return (\n      <VirtualizedSelect\n        options={options}\n        onChange={(selectValue) => this.setState({ selectValue })}\n        value={this.state.selectValue}\n      />\n    )\n  }\n}\n```\n\n## React Virtualized Select Props\n\nThe additional parameters introduced by _react-select-virtualized_ are optional. They are:\n\n| Property | Type | Description |\n|:---|:---|:---|\n| async | `PropTypes.bool` | Use `Select.Async` internally; if this property is specified then a [`loadOptions`](https://github.com/JedWatson/react-select#async-options-with-promises) method should also be used. |\n| maxHeight | `PropTypes.number` | Max height of options menu; defaults to 200 pixels. |\n| optionHeight | `PropTypes.number` or `PropTypes.func` | Option height (defaults to 35 pixels). Dynamic height can be supported via a function with the signature `({ option: Object }): number` |\n| optionRenderer | `PropTypes.func` | Custom option renderer; (see below for signature). |\n| selectComponent | `PropTypes.func` | Use a specific select HOC (eg `Select`, `Select.Creatable`, `Select.Async` or `Select.AsyncCreatable`); defaults to `Select` (or `Select.Async` if `async` flag is true). |\n\n## Custom Option Renderer\n\nYou can override the built-in option renderer by specifying your own `optionRenderer` property. Your renderer should return a React element that represents the specified option. It will be passed the following named parameters:\n\n| Property | Type | Description |\n|:---|:---|:---|\n| focusedOption | `Object` | The option currently-focused in the dropdown. Use this property to determine if your rendered option should be highlighted or styled differently. |\n| focusedOptionIndex | `number` | Index of the currently-focused option. |\n| focusOption | `Function` | Callback to update the focused option; for example, you may want to call this function on mouse-over. |\n| key | `string` | A unique identifier for each element created by the renderer. |\n| labelKey | `string` | Attribute of option that contains the display text. |\n| option | `Object` | The option to be rendered. |\n| options | `Array<Object>` | Array of options (objects) contained in the select menu. |\n| selectValue | `Function` | Callback to update the selected values; for example, you may want to call this function on click. |\n| style | `Object` | Styles that must be passed to the rendered option. These styles are specifying the position of each option (required for correct option displaying in the dropdown).\n| valueArray | `Array<Object>` | Array of the currently-selected options. Use this property to determine if your rendered option should be highlighted or styled differently. |\n| valueKey | `string` | Attribute of option that contains the value. |\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/bvaughn/react-virtualized-select.git"
  },
  "scripts": {
    "build": "npm run build:commonjs && npm run build:css && npm run build:es && npm run build:demo && npm run build:umd",
    "build:commonjs": "npm run clean:commonjs && cross-env NODE_ENV=production cross-env BABEL_ENV=commonjs babel source --out-dir dist/commonjs --ignore *.example.js,*.test.js,source/demo/,source/tests.js",
    "build:css": "postcss --use autoprefixer source/styles.css > styles.css",
    "build:demo": "npm run clean:demo && cross-env NODE_ENV=production webpack --config webpack.config.demo.js -p --bail",
    "build:es": "npm run clean:es && cross-env NODE_ENV=production cross-env BABEL_ENV=es babel source --out-dir dist/es --ignore *.example.js,*.test.js,source/demo/,source/tests.js",
    "build:umd": "npm run clean:umd && cross-env NODE_ENV=production webpack --config webpack.config.umd.js --bail",
    "clean": "npm run clean:commonjs && npm run clean:demo && npm run clean:es && npm run clean:umd",
    "clean:commonjs": "rimraf dist/commonjs",
    "clean:demo": "rimraf build",
    "clean:es": "rimraf dist/es",
    "clean:umd": "rimraf dist/umd",
    "deploy": "gh-pages -d build",
    "lint": "standard",
    "postpublish": "npm run deploy",
    "posttest": "codecov",
    "prebuild": "npm run lint",
    "prepublish": "npm run build",
    "start": "cross-env NODE_ENV=development webpack-dev-server --hot --inline --config webpack.config.dev.js",
    "stats": "NODE_ENV=production webpack --config webpack.config.demo.js -p --json > stats.json",
    "test": "npm run lint && npm run test:unit",
    "test:unit": "cross-env NODE_ENV=test karma start",
    "watch": "watch 'clear && npm run test -s' source",
    "watch:nolint": "watch 'clear && npm run test:unit' source"
  },
  "standard": {
    "global": [
      "afterAll",
      "afterEach",
      "beforeAll",
      "beforeEach",
      "describe",
      "expect",
      "fdescribe",
      "fetch",
      "fit",
      "getComputedStyle",
      "it",
      "jasmine"
    ],
    "ignore": [
      "dist",
      "playground",
      "source/vendor"
    ],
    "parser": "babel-eslint"
  },
  "version": "3.1.3"
}
